define([], function () {
	'use strict';

	define(['jquery', 'backbone', 'marionette', 'socket', 'config', 'views/dialogs/ModalDialogView', 'views/BaseView', 'views/QuestionView', 'views/SubmissionListView', 'views/ProjectionView', 'models/QuestionCollection', 'models/AppModel', 'text!templates/homeTemplate.html', 'text!templates/questionListTemplate.html'], function ($, Backbone, Marionette, io, config, ModalDialogView, BaseView, QuestionView, SubmissionListView, ProjectionView, QuestionCollection, AppModel, homeTemplate, questionListTemplate) {

		var Controller = Marionette.Controller.extend({

			initialize: function initialize(app) {
				this.app = app;

				app.addRegions({
					contentRegion: "#content",
					modalRegion: "#modal-container"
				});

				//register client events
				Backbone.on('dialog:open', this.openDialog, this);
				Backbone.on('dialog:close', this.closeDialog, this);

				//register socket events
				var socket = io(config.web_socket_url);
				socket.on('submissions:added', function (data) {
					Backbone.trigger('submissions:added', data);
				});

				//fetch settings
				Backbone.settings = new AppModel({ id: 1 });
				Backbone.settings.fetch();
			},

			/* ROUTES */

			showQuestion: function showQuestion(id) {
				this.app.contentRegion.show(new QuestionView({ id: id }));
			},

			listQuestions: function listQuestions() {

				var questions = new QuestionCollection();
				questions.fetch();

				this.app.contentRegion.show(new BaseView({
					template: _.template(questionListTemplate),
					collection: questions
				}));
			},

			listSubmissions: function listSubmissions() {
				this.app.contentRegion.show(new SubmissionListView());
			},

			showProjection: function showProjection() {
				this.app.contentRegion.show(new ProjectionView());
			},

			default: function _default() {
				this.app.contentRegion.show(new BaseView({
					template: _.template(homeTemplate)
				}));
			},

			/* DIALOGS */

			openDialog: function openDialog(options) {
				this.app.modalRegion.show(new ModalDialogView(options));
			},

			closeDialog: function closeDialog() {
				if (this.app.modalRegion.hasView()) this.app.modalRegion.reset();
			}

		});

		return Controller;
	});
});
//# sourceMappingURL=data:application/json;base64,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QXJCO0FBQ0Q7O0FBakU0QyxHQUE3QixDQUFqQjs7QUFxRUEsU0FBTyxVQUFQO0FBQ0EsRUF2RkQiLCJmaWxlIjoib250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcbiAgICAgICAgJ2pxdWVyeScsXG4gICAgICAgICdiYWNrYm9uZScsXG4gICAgICAgICdtYXJpb25ldHRlJyxcbiAgICAgICAgJ3NvY2tldCcsXG4gICAgICAgICdjb25maWcnLFxuICAgICAgICAndmlld3MvZGlhbG9ncy9Nb2RhbERpYWxvZ1ZpZXcnLFxuICAgICAgICAndmlld3MvQmFzZVZpZXcnLFxuICAgICAgICAndmlld3MvUXVlc3Rpb25WaWV3JyxcbiAgICAgICAgJ3ZpZXdzL1N1Ym1pc3Npb25MaXN0VmlldycsXG4gICAgICAgICd2aWV3cy9Qcm9qZWN0aW9uVmlldycsXG4gICAgICAgICdtb2RlbHMvUXVlc3Rpb25Db2xsZWN0aW9uJyxcbiAgICAgICAgJ21vZGVscy9BcHBNb2RlbCcsXG4gICAgICAgICd0ZXh0IXRlbXBsYXRlcy9ob21lVGVtcGxhdGUuaHRtbCcsXG4gICAgICAgICd0ZXh0IXRlbXBsYXRlcy9xdWVzdGlvbkxpc3RUZW1wbGF0ZS5odG1sJ1xuXSwgZnVuY3Rpb24oJCwgQmFja2JvbmUsIE1hcmlvbmV0dGUsIGlvLCBjb25maWcsIE1vZGFsRGlhbG9nVmlldywgQmFzZVZpZXcsIFF1ZXN0aW9uVmlldywgU3VibWlzc2lvbkxpc3RWaWV3LCBQcm9qZWN0aW9uVmlldywgUXVlc3Rpb25Db2xsZWN0aW9uLCBBcHBNb2RlbCwgaG9tZVRlbXBsYXRlLCBxdWVzdGlvbkxpc3RUZW1wbGF0ZSl7XG5cdFxuXHR2YXIgQ29udHJvbGxlciA9IE1hcmlvbmV0dGUuQ29udHJvbGxlci5leHRlbmQoe1xuXHRcdFxuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKGFwcCkge1xuXHRcdFx0dGhpcy5hcHAgPSBhcHA7XG5cdFx0XHRcblx0XHRcdGFwcC5hZGRSZWdpb25zKHtcblx0XHRcdFx0Y29udGVudFJlZ2lvbjogXCIjY29udGVudFwiLFxuXHRcdFx0XHRtb2RhbFJlZ2lvbjogXCIjbW9kYWwtY29udGFpbmVyXCJcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHQvL3JlZ2lzdGVyIGNsaWVudCBldmVudHNcblx0XHRcdEJhY2tib25lLm9uKCdkaWFsb2c6b3BlbicsIHRoaXMub3BlbkRpYWxvZywgdGhpcyk7XG5cdFx0XHRCYWNrYm9uZS5vbignZGlhbG9nOmNsb3NlJywgdGhpcy5jbG9zZURpYWxvZywgdGhpcyk7XG5cblx0XHRcdC8vcmVnaXN0ZXIgc29ja2V0IGV2ZW50c1xuXHRcdFx0dmFyIHNvY2tldCA9IGlvKGNvbmZpZy53ZWJfc29ja2V0X3VybCk7XG4gICAgICAgICAgICBzb2NrZXQub24oJ3N1Ym1pc3Npb25zOmFkZGVkJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIEJhY2tib25lLnRyaWdnZXIoJ3N1Ym1pc3Npb25zOmFkZGVkJyxkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvL2ZldGNoIHNldHRpbmdzXG4gICAgICAgICAgICBCYWNrYm9uZS5zZXR0aW5ncyA9IG5ldyBBcHBNb2RlbCh7aWQ6IDF9KTtcbiAgICAgICAgICAgIEJhY2tib25lLnNldHRpbmdzLmZldGNoKCk7XG5cdFx0fSxcblx0XHRcdFxuXHRcdC8qIFJPVVRFUyAqL1xuXG5cdFx0c2hvd1F1ZXN0aW9uOiBmdW5jdGlvbihpZCkge1xuXHRcdFx0dGhpcy5hcHAuY29udGVudFJlZ2lvbi5zaG93KG5ldyBRdWVzdGlvblZpZXcoe2lkIDogaWR9KSk7XG5cdFx0fSxcblxuXHRcdGxpc3RRdWVzdGlvbnM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgcXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9uQ29sbGVjdGlvbigpO1xuXHRcdFx0cXVlc3Rpb25zLmZldGNoKCk7XG5cblx0XHRcdHRoaXMuYXBwLmNvbnRlbnRSZWdpb24uc2hvdyhuZXcgQmFzZVZpZXcoeyBcblx0XHRcdFx0dGVtcGxhdGUgOiBfLnRlbXBsYXRlKHF1ZXN0aW9uTGlzdFRlbXBsYXRlKSxcblx0XHRcdFx0Y29sbGVjdGlvbiA6IHF1ZXN0aW9uc1xuXHRcdFx0fSkpO1xuXHRcdH0sXG5cblx0XHRsaXN0U3VibWlzc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5hcHAuY29udGVudFJlZ2lvbi5zaG93KG5ldyBTdWJtaXNzaW9uTGlzdFZpZXcoKSk7XG5cdFx0fSxcblxuXHRcdHNob3dQcm9qZWN0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuYXBwLmNvbnRlbnRSZWdpb24uc2hvdyhuZXcgUHJvamVjdGlvblZpZXcoKSk7XG5cdFx0fSxcblx0XG5cdFx0ZGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmFwcC5jb250ZW50UmVnaW9uLnNob3cobmV3IEJhc2VWaWV3KHsgXG5cdFx0XHRcdHRlbXBsYXRlIDogXy50ZW1wbGF0ZShob21lVGVtcGxhdGUpIFxuXHRcdFx0fSkpO1xuXHRcdH0sXG5cdFx0XG5cdFx0LyogRElBTE9HUyAqL1xuXHRcdFxuXHRcdG9wZW5EaWFsb2c6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHRcdHRoaXMuYXBwLm1vZGFsUmVnaW9uLnNob3cobmV3IE1vZGFsRGlhbG9nVmlldyhvcHRpb25zKSk7XG5cdFx0fSxcblx0XHRcblx0XHRjbG9zZURpYWxvZzogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAodGhpcy5hcHAubW9kYWxSZWdpb24uaGFzVmlldygpKVxuXHRcdFx0XHR0aGlzLmFwcC5tb2RhbFJlZ2lvbi5yZXNldCgpO1xuXHRcdH1cblx0XHRcblx0fSk7XG5cdFxuXHRyZXR1cm4gQ29udHJvbGxlcjtcbn0pOyJdfQ==